openapi: 3.0.1
info:
  title: Simple Microblog Service
  description: "API service used for testing experimental backend architectures."
  termsOfService: http://omega.io/terms/
  contact:
    email: apiteam@omega.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
  x-application-config:
    docker:
      service-name: microblog-service-backend
    aws:
      ecr-repository-name: my-microblog-service
      ecs-service-name: api-my-microblog-service
externalDocs:
  description: Find out more about Simple Micrblog Service
  url: http://omgea.io./docs
servers:
  - url: https://microblog.omega.io/v2
  - url: http://microblog.omega.io/v2
tags:
  - name: Posts
    description: Endpoints for accessing Posts business services.
paths:
  /posts:
    post:
      tags:
        - Posts
      summary: Create new post.
      operationId: createPost
      requestBody:
        description: New post document to add to the data store.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
        required: true
      responses:
        405:
          description: Method not allowed.
          content: {}
      security:
        - microblogservice_auth:
            - create:any
            - create:own
      x-codegen-request-body-name: body
    get:
      tags:
        - Posts
      summary: Get all post documents from the data store.
      description: Get all post documents from the data store.
      operationId: getAllPosts
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        400:
          description: Bad request
          content: {}
      security:
        - microblogservice_auth:
            - read:any
            - read:own
  /posts/{id}:
    put:
      tags:
        - Posts
      summary: Update an existing post.
      operationId: updatePost
      parameters:
        - name: id
          in: path
          description: Unique identifier for a single post document.
          required: true
          schema:
            type: string
      requestBody:
        description: Document update for a post that already exists in the data store.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
        required: true
      responses:
        400:
          description: Bad request
          content: {}
        404:
          description: Not found
          content: {}
        405:
          description: Method not allowed
          content: {}
      security:
        - microblogservice_auth:
            - update:any
            - update:own
      x-codegen-request-body-name: body
    get:
      tags:
        - Posts
      summary: Find a single post by UUID.
      description: Find a single post document by its UUID.
      operationId: findPostById
      parameters:
        - name: id
          in: path
          description: Unique identifier for a single post document.
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        400:
          description: Bad request
          content: {}
      security:
        - microblogservice_auth:
            - read:any
            - read:own
    delete:
      tags:
        - Posts
      summary: Delete an existing post.
      operationId: deletePost
      parameters:
        - name: id
          in: path
          description: Unique identifier for a single post document.
          required: true
          schema:
            type: string
      responses:
        400:
          description: Bad request
          content: {}
        404:
          description: Not found
          content: {}
        405:
          description: Method not allowed
          content: {}
      security:
        - microblogservice_auth:
            - delete:any
      x-codegen-request-body-name: body
  /users:
    post:
      tags:
        - Users
      summary: Create new user.
      operationId: createUser
      requestBody:
        description: New user document to add to the data store.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        405:
          description: Method not allowed.
          content: {}
      security:
        - microblogservice_auth:
            - create:any
            - create:own
      x-codegen-request-body-name: body
    get:
      tags:
        - Users
      summary: Get all user documents from the data store.
      description: Get all user documents from the data store.
      operationId: getAllUsers
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        400:
          description: Bad request
          content: {}
      security:
        - microblogservice_auth:
            - read:any
            - read:own
  /users/{id}:
    put:
      tags:
        - Users
      summary: Update an existing user.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: Unique identifier for a single user document.
          required: true
          schema:
            type: string
      requestBody:
        description: Document update for a user that already exists in the data store.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        400:
          description: Bad request
          content: {}
        404:
          description: Not found
          content: {}
        405:
          description: Method not allowed
          content: {}
      security:
        - microblogservice_auth:
            - update:any
            - update:own
      x-codegen-request-body-name: body
    get:
      tags:
        - Users
      summary: Find a single user by UUID.
      description: Find a single user document by its UUID.
      operationId: findUserById
      parameters:
        - name: id
          in: path
          description: Unique identifier for a single user document.
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        400:
          description: Bad request
          content: {}
      security:
        - microblogservice_auth:
            - read:any
            - read:own
    delete:
      tags:
        - Users
      summary: Delete an existing user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: Unique identifier for a single beer document.
          required: true
          schema:
            type: string
      responses:
        400:
          description: Bad request
          content: {}
        404:
          description: Not found
          content: {}
        405:
          description: Method not allowed
          content: {}
      security:
        - microblogservice_auth:
            - delete:any
      x-codegen-request-body-name: body
  /token:
    post:
      tags:
        - Token
      summary: Create new authentication token.
      operationId: createToken
      requestBody:
        description: Create a new authentication token for authorizing API requests.
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: tstart@avengers.io
                password:
                  type: string
                  example: te$$er@ct
        required: true
      responses:
        200:
          $ref: "#/components/schemas/Token"
        500:
          description: Server Error
          content: {}
      x-codegen-request-body-name: body
components:
  schemas:
    Post:
      required:
        - body
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: "5dcae1b4c5459371c20c0778"
        body:
          type: string
          example: The quick brown fox jumps over the lazy dog.
    User:
      required:
        - email
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: "5dcae1b4c5459371c20c0778"
        _createdAt:
          type: string
          example: "2020-02-25T16:10:32.000Z"
        _updatedAt:
          type: string
          example: "2020-02-25T16:41:19.000Z"
        email:
          type: string
          example: tstark@avengers.io
        imageUrl:
          type: string
          example: "https://placehold.it/400x400"
        name:
          type: string
          example: Tony Stark
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Token:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRvbnkgU3RhcmsiLCJlbWFpbCI6InRzdGFya0BhdmVuZ2Vycy5pbyIsInJvbGUiOlsiYWRtaW4iXSwiaWF0IjoxNTE2MjM5MDIyfQ.gHUYnvTqprQxuUpU0rgyfXMe8TFouokoFX8Lc_rAt-U
  securitySchemes:
    microblogservice_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:beers: modify beers in your account
            read:beers: read your beers
    api_key:
      type: apiKey
      name: api_key
      in: header
